// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/11/Pong/Ammo.jack

/**
 * A graphical Pong Ammo. 
 * Displayed as a filled horizontal rectangle that has 
 * a screen location, a width and a height.
 * Has methods for drawing, erasing, moving left and right, 
 * and changing its width (to make the hitting action more challenging).
 * This class should have been called "paddle", following the 
 * standard Pong terminology. But, unaware of this terminology,
 * we called it "Ammo", and then decided to stick to it. 
 */
class Ammo {

    field int x, y;           // the Ammo's screen location
    field int width, height;  // the Ammo's width and height
    field int bulletSpeed;


    /** Constructs a new Ammo with the given location and width. */
    constructor Ammo new(int Ax, int Ay,int Awidth, int Aheight) {
        let x = Ax;
        let y = Ay;
        let width=Awidth;
        let height=Aheight;
        let bulletSpeed=8;
        do show();
        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Shows the Ammo. */
    method void show() {
        do Screen.setColor(true);
        do draw();
        return;
    }

    /** Hides the Ammo. */
    method void hide() {
        do Screen.setColor(false);
        do draw();
        return;
    }

    /** Draws the Ammo. */
    method void draw() {
        do Screen.drawRectangle(x, y, x + width, y + height);
        return;
    }

    /** Returns the Ammo's left edge. */
    method int getTop() {
        return y;
    }

    /** Returns the Ammo's right edge. */
    method int getBottom() {
        return y + height;
    }

    /** Returns the ball's left edge. */
    method int getLeft() {
        return x;
    }

    /** Returns the ball's right edge. */
    method int getRight() {
        return x + width;
    }

    /** Moves the Ammo one step in the Ammo's direction. */
    method void move() {
        let y=y-bulletSpeed;
        if (y < 0) { 
            let y=228;
            }
        else{
            do show();
        }
        return;
    }
}