


class spaceInvaders {

    static spaceInvaders instance; // the singelton, a space Invaders instance     
    field Bat bat;            // the bat
    field Ball ball;          // the ball
    field int pos;            // X Position where the ball will be painted
    field int ypos;           // Y Position where the ball will be painted
    field int posAux;         //Auxiliar to calculate that position 
    field int wall;           // the current wall that the ball is bouncing off of.
    field int score;          // the current score.
    field int lastWall;       // the last wall that the ball bounced off of.
    field int speed;          //Speed of the ball
    field Gun gun;            //Rectangle on top of the bar
    field Ammo ammo;          //Bullet

    // The current width of the bat
    field int batWidth;

    field int gunWidth;
    field int gunLeft, gunRight;
    field int level;

    //Ammo
    field int shot;      //1 a shot is made
    field int ammoWidth;  
    field int obj;       //1 a shot object is created
    field int creado;
    field int xAmmo;
    field int colision;
    field int ammoHeight; //Ammo Height 
    field boolean exit;       // true when the game is over

    
    /** Constructs a new space Invaders game. */
    constructor spaceInvaders new() {
	    do Screen.clearScreen();
        let speed=4;
        let batWidth = 50;  // initial bat size
        let gunWidth = 10;
        let ammoWidth = 3;
        let ammoHeight= 8;
        let level = 1;
        let pos = 253;
        let ypos= 50;
        let bat  =  Bat.new(220, 229, batWidth, 7);
        let ball = Ball.new(pos, ypos, 0, 511, 0, 229);
        let gun  =  Gun.new(240, 224, gunWidth, 5);
        do ball.setDestination(400);
        do Screen.drawRectangle(0, 238, 511, 240);
	    do Output.moveCursor(22,0);
	    do Output.printString("Score:");
        do Output.moveCursor(22, 6);
        let score = 0;
        do Output.printInt(score);
        do Output.moveCursor(22, 50);
        do Output.printString("Level: ");
        do Output.moveCursor(22, 59);
        do Output.printInt(level);
	    let exit = false;
	    let wall = 0;
	    let lastWall = 0;

        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do bat.dispose();
	    do ball.dispose();
        do ammo.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Creates an instance of Pong game, and stores it. */
    function void newInstance() {
        let instance = spaceInvaders.new();
        return;
    }
    
    /** Returns the single instance of this Pong game. */
    function spaceInvaders getInstance() {
        return instance;
    }

    /** Starts the game, and andles inputs from the user that control
     *  the bat's movement direction. */
    method void run() {
        var char key;
        var int top;

        while (~exit) {
            while (~exit) {
                let key = Keyboard.keyPressed();
                do bat.move();
                do gun.move();
                do moveBall();
         
            if (key = 130) { 
                do bat.setDirection(1); 
                do gun.setDirection(1);
            }
	        else {
	            if (key = 132) { 
                    do bat.setDirection(2); 
                    do gun.setDirection(2);
                }
            }
            if (colision = 1){
                do ball.hide();
                do ball.dispose();
                let ball = Ball.new(pos*100,ypos,0,511,0,229);
                do ball.show();
                do ball.setSpeed(speed);
                let colision=0;
            }
            
            if ((key = 131) | (shot=1)) {
                let shot=1;
                if (obj=0){
                    
                    let xAmmo=gun.getLeft();
                    let ammo =  Ammo.new(xAmmo,220,ammoWidth,ammoHeight);
                    let obj=1;

                    
                }

                if (obj=1){
                    do ammo.hide();
                    if(((ball.getBottom()>ammo.getBottom()) & (ball.getTop()<ammo.getTop())) | ((ball.getTop()=ammo.getBottom()) | (ball.getBottom() = ammo.getTop()))){
                        if(((ball.getLeft()<ammo.getLeft()) & (ball.getRight()>ammo.getRight())) | ((ammo.getRight()+level>ball.getLeft()) & (ammo.getRight()+level < ball.getRight())) | ((ammo.getLeft()-level>ball.getLeft()) & (ammo.getLeft()-level < ball.getRight()))){
                            let score= score+1;
                            let speed= speed+1;
                            let level = level+1;
                            do ammo.dispose();
                            do Output.moveCursor(22,6);
                    	    do Output.printInt(score);
                            do Output.moveCursor(22, 50);
                            do Output.printString("Level: ");
                            do Output.moveCursor(22, 59);
                            do Output.printInt(level);
                            let pos   = (ball.getRight() /4); //Módulo
                            let posAux= pos;                           
                            let pos   = (ball.getRight()-(posAux*4));
                            let colision=1;
                        }
                    }
                    let top = ammo.getTop()-ammoHeight; 
                    if (top<2) { //Velocidad bala , cambiar también en Ammo la "y - 4"
                        do ammo.hide(); 
                        let top=240;
                        let obj=0;
                        let shot=0;
                    } 
                    else{
                        do ammo.move();
                        }
                    }
                }
                if (key = 81) { 
                    let exit = true; 
                }
            do Sys.wait(30);
            }
            
        }

	    if (exit) {
            do Output.moveCursor(10,27);
	        do Output.printString("Game Over");
	    }
            
        return;
    }

    /**
     * Handles ball movement, including bouncing.
     * If the ball bounces off a wall, finds its new direction.
     * If the ball bounces off the bat, increases the score by one
     * and shrinks the bat's size, to make the game more challenging. 
     */
    method void moveBall() {
        var int bouncingDirection, batLeft, batRight, ballLeft, ballRight;

        let wall = ball.move();

        if ((wall > 0) & (~(wall = lastWall))) {

            let lastWall = wall;            
            let bouncingDirection = 0;
            let batLeft = bat.getLeft();
            let batRight = bat.getRight();
            let gunLeft = gun.getLeft();
            let gunRight = gun.getRight();
            let ballLeft = ball.getLeft();
            let ballRight = ball.getRight();
            do ball.bounce(bouncingDirection);
        }
        return;
    }
}
